{"version":3,"sources":["app/models/Pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modelStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","feature/activities/dashboard/ActivityFilter.tsx","feature/profiles/FollowButton.tsx","feature/profiles/ProfileCard.tsx","feature/activities/dashboard/ActivityListItemAttendee.tsx","feature/activities/dashboard/ActivityListItem.tsx","feature/activities/dashboard/ActivityList.tsx","feature/activities/dashboard/ActivityListItemPlaceholder.tsx","feature/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","feature/users/LoginForm.tsx","feature/errors/ValidationErrors.tsx","feature/users/RegisterForm.tsx","feature/home/HomePage.tsx","app/layout/LoadingComponent.tsx","feature/activities/form/MyTextArea.tsx","feature/activities/form/MySelectInput.tsx","app/common/options/category.ts","feature/activities/form/MyDateInput.tsx","feature/activities/form/ActivityForm.tsx","feature/activities/details/ActivityDetailedChat.tsx","feature/activities/details/ActivityDetailedHeader.tsx","feature/activities/details/ActivityDetailedInfo.tsx","feature/activities/details/ActivityDetailedSidebar.tsx","feature/activities/details/ActiivityDetails.tsx","feature/errors/TestError.tsx","feature/errors/NotFound.tsx","feature/errors/ServerError.tsx","app/common/ModalContainer.tsx","app/common/ImageUpload/PhotoWidgetCropper.tsx","app/common/ImageUpload/PhotoWidgetDropzone.tsx","app/common/ImageUpload/PhotoUploadWidget.tsx","feature/profiles/ProfilePhotos.tsx","feature/profiles/ProfileEditForm.tsx","feature/profiles/ProfileDetails.tsx","feature/profiles/ProfileFollowings.tsx","feature/profiles/ProfileActivityList.tsx","feature/profiles/ProfileContent.tsx","feature/profiles/ProfileHeader.tsx","feature/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","console","log","Promise","reject","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","responseBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowing","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","date","description","category","city","venue","Profile","userName","displayName","image","ActivityStore","activities","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","ProfileStore","loadingProfile","uploadingPhoto","loadingMainPhoto","waitDeleting","updatingProfile","loadingupdateFollowing","loadingFollowers","loadingFollowing","followings","activeTab","userActivities","loadingActivities","setActiviteTab","loadUserActivities","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","Card","Description","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","bordered","circular","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","basic","secondary","ActivityListItemAttendee","clearing","floated","groupeActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","marginBotton","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPHotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActiivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9dafdf50.chunk.js","sourcesContent":["\r\nexport interface Pagination{\r\n    currentPage : number;\r\n    itemPerPage: number;\r\n    totalItem: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data:T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data:T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber =1, pageSize = 2){\r\n        this.pageSize = pageSize;\r\n        this.pageNumber = pageNumber;\r\n    }\r\n}","\r\nimport axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/Pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/User';\r\nimport { store } from '../stores/store';\r\n\r\n//setting response delay\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\n//connect to .net api to use call data,create, update, delete\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n\r\n    try {\r\n        const pagination = response.headers['pagination'];\r\n        if(pagination){\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return await Promise.reject(error);\r\n    }\r\n}, (error: AxiosError) => {\r\n\r\n    const { data, status, config } = error.response!;\r\n\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            console.log(data)\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\n//use Type T, ähnlich wie in C#\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params:URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities',{params}).then(responseBody),\r\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => request.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => request.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => request.delete<void>(`/activities/${id}`),\r\n    attend: (id:string) => request.post<void>(`/activities/${id}/attend`,{})\r\n}\r\n\r\nconst Account = {\r\n    current: () => request.get<User>('/account'),\r\n    login: (user: UserFormValues) => request.post<User>('account/login', user),\r\n    register: (user: UserFormValues) => request.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username:string) => request.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto:(file: Blob)=>{\r\n        let formData = new FormData();\r\n        formData.append('File',file);\r\n        return axios.post<Photo>('photos', formData,{\r\n            headers:{'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id:string) => request.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto:(id:string) => request.delete(`/photos/${id}`),\r\n    updateProfile:(profile:Partial<Profile>) => request.put(`/profiles`,profile),\r\n    updateFollowing:(username:string) => request.post(`/follow/${username}`,{}),\r\n    listFollowing:(username:string, predicate:string)=>request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities:(username:string, predicate:string) => request.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n        id: string;\r\n        title: string;\r\n        date: Date | null;\r\n        description: string;\r\n        category: string;\r\n        city: string;\r\n        venue: string;\r\n\r\n        hostUsername: string;\r\n        isCancelled: boolean;\r\n        attendees: Profile[];\r\n\r\n        isGoing: boolean;\r\n        isHost: boolean;\r\n        host?: Profile;\r\n}\r\n\r\nexport class Activity implements Activity{\r\n        constructor(init?:ActivityFormValues){\r\n                Object.assign(this,init);\r\n        }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n        id?: string = undefined;\r\n        title: string = '';\r\n        date: Date | null = null;\r\n        description: string = '';\r\n        category: string = '';\r\n        city: string = '';\r\n        venue: string = '';\r\n\r\n        constructor(activity?: ActivityFormValues) {\r\n                if (activity) {\r\n                        this.id = activity.id;\r\n                        this.title = activity.title;\r\n                        this.category = activity.category;\r\n                        this.city = activity.city;\r\n                        this.date = activity.date;\r\n                        this.description = activity.description;\r\n                        this.venue = activity.venue;\r\n                }\r\n        }\r\n\r\n}","import { User } from \"./User\";\r\n\r\nexport interface Profile{\r\n    username:string;\r\n    displayName\t: string;\r\n    image?:string;\r\n    bio?:string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?:Photo[];\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n    }\r\n\r\nexport class Profile implements Profile{\r\n    constructor(user: User){\r\n        this.username = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo{\r\n    id: string;\r\n    url:string;\r\n    isMain: boolean;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/Pagination\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    activities: Activity[] = [];\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            })\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            });\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupeActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true)\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach((activity) => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false)\r\n\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        this.setLoadingInitial(true)\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            runInAction(() => {\r\n                this.selectedActivity = activity;\r\n                this.setLoadingInitial(false);\r\n\r\n            })\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(false);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.userName\r\n            )\r\n            activity.isHost = activity.hostUsername === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n\r\n        console.log('is going ' + activity.isGoing);\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploadingPhoto = false;\r\n    loadingMainPhoto = false;\r\n    waitDeleting = false;\r\n    updatingProfile = false;\r\n    loadingupdateFollowing = false;\r\n    loadingFollowers = false;\r\n    loadingFollowing = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    setActiviteTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploadingPhoto = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploadingPhoto = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loadingMainPhoto = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loadingMainPhoto = false;\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(() => this.loadingMainPhoto = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.waitDeleting = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.waitDeleting = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.waitDeleting = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.updatingProfile = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.updatingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingProfile = false\r\n            });\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loadingupdateFollowing = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.userName && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loadingupdateFollowing = false;\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingupdateFollowing = false\r\n            });\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowing = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowing(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowing = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingFollowing = false\r\n            });\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore{\r\n    user:User | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async(creds: UserFormValues) =>{\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.user = user;\r\n            runInAction(()=>this.user = user);\r\n            history.push('/activities');\r\n            console.log(user);\r\n            store.modalStore.closeModal();\r\n        }catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n    \r\n    getUser = async()=>{\r\n        try{\r\n            const user = await agent.Account.current();\r\n            runInAction(()=> this.user = user);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async(creds: UserFormValues)=>{\r\n        try{\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.user = user;\r\n            runInAction(()=>this.user = user);\r\n            history.push('/activities');\r\n            console.log(user);\r\n            store.modalStore.closeModal();\r\n        }catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) =>{\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name:string) =>{\r\n        if(this.user) this.user.displayName = name;\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport activityStore from \"./activityStore\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modelStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    activityStore: activityStore;\r\n    commonStore:CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","  \r\nimport { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/ServerError\";\r\n\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n    \r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal{\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) =>{\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = ()=>{\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    comments: ChatComment[]=[];\r\n    hubConnection: HubConnection | null = null\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId='+activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment =>{\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer(function NavBar() {\r\n\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/Images/logo.png\" alt=\"logo\" style={{ marginRight: 10 }} />\r\n                     Reactivities\r\n                 </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activitiy' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || 'Images/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer( function ActivityFilter() {\r\n\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content='I am going'\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content='I am hosting'\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n             onChange={(date)=>setPredicate('startDate', date as Date)}\r\n             value={predicate.get('startDate')||new Date()}\r\n            />\r\n\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loadingupdateFollowing: loading } = profileStore;\r\n\r\n    if (userStore.user?.userName === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal' content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                    loading={loading}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props{\r\n\r\n    profile: Profile;\r\n}\r\nexport default observer (function ProfileCard({profile}:Props) {\r\n    return(\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || 'Images/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{profile.bio}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} Followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAtendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    };\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username}\r\n                            as={Link}\r\n                            to={`/profiles/${attendee.username}`}\r\n                        >\r\n                            <Image\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/Images/user.png'} />\r\n                        </List.Item>\r\n                    }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})\r\n","import { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Link to={`/profiles/${activity.hostUsername}`} >\r\n                            <Item.Image style={{ marginBottom: 3, marginRight: 20 }} size='tiny' circular src={activity.host?.image || '/Images/user.png'} />\r\n                        </Link>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`} >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by\r\n                                <Link to={`/profiles/${activity.hostUsername}`} >\r\n                                    {' ' + activity.host?.displayName}\r\n                                </Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {activity.description}\r\n                </span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { groupeActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupeActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>    \r\n                    {activities.map((activity) => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n\r\n                </Fragment>\r\n            ))}\r\n\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport {  Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/Pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilter from './ActivityFilter';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    //here will create with connection between client and api\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    //Loading indicator\r\n    //if (activityStore.loadingInitial) return <LoadingComponent content='Loading activities...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilter />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    label?:string;\r\n    type?:string;\r\n}\r\n\r\nexport default function MyTextInput(props:Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error} > \r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore.login(values).catch(error =>\r\n                    setErrors({ error: 'Invalid email or password'}))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() =>\r\n                        <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />\r\n                    } />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { Message } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\nexport default function ValidationErrors({errors}:Props) {\r\n    return(\r\n       <Message error>\r\n           {errors && (\r\n               <Message.List>\r\n                   {errors.map((err:any,i: any)=>(\r\n                       <Message.Item key={i}>\r\n                           {err}\r\n                       </Message.Item>\r\n                   ))}\r\n               </Message.List>\r\n           )}\r\n       </Message>\r\n    )  \r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ username: '', displayName: '',email: '', password: '',  error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore.register(values).catch(error =>\r\n                    setErrors({ error }))}\r\n\r\n            validationSchema={ Yup.object({\r\n\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() =>\r\n                        <ValidationErrors errors={errors.error} />\r\n                    } />\r\n                    <Button\r\n                        disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting}\r\n                        positive content='Register'\r\n                        type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/Images/logo.png' style={{ marginBotton: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(\r\n                            <LoginForm />\r\n                        )} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(\r\n                            <RegisterForm />\r\n                        )} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\n//Loading indicator typescript\r\ninterface Props{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted =true,content = 'Loading...'}: Props){\r\n    return(\r\n        <Dimmer active={true} inverted ={inverted} >\r\n        <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?:string;\r\n}\r\n\r\nexport default function MyTextArea(props:Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error} > \r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    label?:string;\r\n    options: any;\r\n}\r\n\r\nexport default function MySelectInput(props:Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text : 'Drinks', value: 'drinks'},\r\n    {text : 'Culture', value: 'culture'},\r\n    {text : 'Film', value: 'film'},\r\n    {text : 'Food', value: 'food'},\r\n    {text : 'Music', value: 'music'},\r\n    {text : 'Travel', value: 'travel'}\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport Datepicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n\r\n            <Datepicker\r\n                {...field}\r\n                {...props}\r\n                selected={field.value && new Date(field.value)}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from '../../../feature/activities/form/MyTextArea'\r\nimport MySelectInput from \"./MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/category\";\r\nimport MyDateInput from \"./MyDateInput\";\r\nimport {  ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required('The activity description is required'),\r\n        date: Yup.string().required('The activity description is required'),\r\n        venue: Yup.string().required('The activity description is required'),\r\n        city: Yup.string().required('The activity description is required')\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${newActivity.id}`)\r\n            })\r\n        } else {\r\n            updateActivity(activity).then(() => {\r\n                history.push(`/activities/${activity.id}`)\r\n            })\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n\r\n                        <Button\r\n                            floated='right'\r\n                            positive type='submit'\r\n                            content='Submit'\r\n                            loading={isSubmitting}\r\n                            disabled={isSubmitting || !isValid || !dirty}                         \r\n                        />\r\n                        <Button floated='right' positive type='button' content='Cancel' as={Link} to={'/activities'} />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                        onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({ body: Yup.string().required() })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className=\"ui form\" >\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{ position: 'relative' }}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea\r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n                                                    if(e.key ==='Enter' && ! e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }} />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((comment) => (\r\n                        <Comment key={comment.id} >\r\n                            <Comment.Avatar src={comment.image || '/Images/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancel' />\r\n                }\r\n                <Image src={`/Images/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.username}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        ></Button>\r\n                        <Button as={Link} to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            disabled={activity.isCancelled}\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button loading={loading}\r\n                        disabled={activity.isCancelled}\r\n                        onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                           </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/Images/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\n\r\nexport default observer (function ActiivityDetails() {\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id:string}>();\r\n\r\n    useEffect(()=>{\r\n        if(id) loadActivity(id);\r\n        return ()=>clearSelectedActivity();\r\n    },[id, loadActivity, clearSelectedActivity])\r\n\r\n    if(!activity || loadingInitial) return <LoadingComponent content='Loading...' />;\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo  activity={activity}  />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n            <ActivityDetailedSidebar activity={activity} />\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and cound not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activiities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer( function ServerError() {\r\n\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n        <Header as='h1' content='Server Error' />\r\n        <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n        {commonStore.error?.details &&\r\n            <Segment>\r\n                <Header as='h4' content='Stack trace' color='teal' />\r\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n            </Segment>\r\n            \r\n        }\r\n    </Container>\r\n    )\r\n})","import {observer} from 'mobx-react-lite'\r\nimport { useStore } from '../stores/store'\r\nimport { Modal } from 'semantic-ui-react';\r\n\r\nexport default observer( function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})\r\n\r\n","import { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props{\r\n    imagePreview :string;\r\n    setCropper:(cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return(\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: 200}}\r\n            initialAspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized = {cropper => setCropper(cropper)}\r\n        >\r\n        </Cropper>\r\n    )\r\n}","import  { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n    const dzActive ={\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file:any)=> Object.assign(file,{\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style ={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props{\r\n    uploadingPhoto: boolean;\r\n    uploadPhoto:(file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({uploadingPhoto,uploadPhoto}: Props) {\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => {\r\n                URL.revokeObjectURL(file.preview)\r\n            });\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 &&\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={uploadingPhoto} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={uploadingPhoto} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\"\r\nimport { SyntheticEvent, useState } from \"react\"\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\"\r\nimport PhotoUploadWidget from \"../../app/common/ImageUpload/PhotoUploadWidget\"\r\nimport { Photo, Profile } from \"../../app/models/profile\"\r\nimport { useStore } from \"../../app/stores/store\"\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploadingPhoto,\r\n        loadingMainPhoto, setMainPhoto, deletePhoto, waitDeleting } } = useStore();\r\n    const [addPHotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={addPHotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPHotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPHotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} uploadingPhoto={uploadingPhoto} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.url}>\r\n                                    <Image src={photo.url}/>\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid width={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main'+photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main'+photo.id && loadingMainPhoto}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && waitDeleting}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport MyTextArea from \"../activities/form/MyTextArea\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer( function ProfileEditForm({ setEditMode }: Props) {\r\n\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n            onSubmit={values => { updateProfile(values).then(() => setEditMode(false)) }}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextArea rows={3} placeholder='Bio' name='bio' />\r\n                    <Button\r\n                        floated='right'\r\n                        positive \r\n                        type='submit'\r\n                        content='Update profile'\r\n                        loading={isSubmitting}\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n    \r\n        </Formik>\r\n    )\r\n})\r\n\r\nconst validationSchema = Yup.object({\r\n    displayName: Yup.string().required('Display name is required'),\r\n})","import { observer } from \"mobx-react-lite\"\r\nimport { useState } from \"react\"\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\"\r\nimport { useStore } from \"../../app/stores/store\"\r\nimport ProfileEditForm from \"./ProfileEditForm\"\r\n\r\nexport default observer( function ProfileDetails() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editMode ?\r\n                        <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n\r\n    const { profileStore } = useStore();\r\n    const { loadingFollowing, profile, followings, activeTab } = profileStore;\r\n\r\n    return (\r\n\r\n        <Tab.Pane loading={loadingFollowing}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? \r\n                            `${profile?.displayName} has ${profile?.followersCount} followers` \r\n                            : \r\n                            `${profile?.displayName} follows ${profile?.followingCount} people` \r\n                        }\r\n                    />\r\n\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivityList() {\r\n    const { profileStore } = useStore();\r\n    const { profile, loadingActivities, loadUserActivities, userActivities } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile])\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/Images/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit:'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileDetails from \"./ProfileDetails\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport React from \"react\";\r\nimport ProfileActivityList from \"./ProfileActivityList\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}: Props) {\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileDetails /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/> },\r\n        { menuItem: 'Events', render: () => <ProfileActivityList /> },\r\n        { menuItem: 'Followers', render: () =><ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings/> },\r\n    ];\r\n\r\n    const {profileStore} = useStore();\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e,data)=>profileStore.setActiviteTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport {  Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/Images/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiviteTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return() =>{\r\n            setActiviteTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiviteTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","\r\nimport { Redirect, Route, RouteComponentProps } from \"react-router\";\r\nimport { RouteProps } from \"react-router-dom\";\r\nimport {useStore} from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component,...rest}: Props) {\r\n    const{userStore:{isLoggedIn}} = useStore();\r\n    return(\r\n        <Route\r\n            {...rest}\r\n            render={(props)=> isLoggedIn? <Component {...props}/> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n","import  {useEffect } from 'react';\nimport './styles.css';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../feature/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../feature/home/HomePage';\nimport ActivityForm from '../../feature/activities/form/ActivityForm';\nimport ActiivityDetails from '../../feature/activities/details/ActiivityDetails';\nimport TestErrors from '../../feature/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../feature/errors/NotFound';\nimport ServerError from '../../feature/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/ModalContainer';\nimport ProfilePage from '../../feature/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActiivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n                <Route path='/errors' component={TestErrors} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport 'react-calendar/dist/Calendar.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport { store, StoreContext } from './app/stores/store';\nimport {createBrowserHistory} from 'history';\nimport { Router } from 'react-router-dom';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history =  createBrowserHistory();\n\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}